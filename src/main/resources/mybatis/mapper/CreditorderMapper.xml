<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linjun.dao.CreditorderMapper">
  <resultMap id="BaseResultMap" type="com.linjun.model.Creditorder">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="userID" jdbcType="BIGINT" property="userid" />
    <result column="goodsName" jdbcType="VARCHAR" property="goodsname" />
    <result column="goodsID" jdbcType="BIGINT" property="goodsid" />
    <result column="addressID" jdbcType="BIGINT" property="addressid" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="Pricce" jdbcType="BIGINT" property="pricce" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="logistics" jdbcType="VARCHAR" property="logistics" />
    <result column="message" jdbcType="VARCHAR" property="message" />
    <result column="logisticsCode" jdbcType="BIGINT" property="logisticscode" />
    <result column="isPay" jdbcType="TINYINT" property="ispay" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userID, goodsName, goodsID, addressID, address, Pricce, createTime, logistics, 
    message, logisticsCode, isPay
  </sql>
  <select id="selectByExample" parameterType="com.linjun.model.CreditorderCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_creditorder
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_creditorder
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_creditorder
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.linjun.model.CreditorderCriteria">
    delete from t_creditorder
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.linjun.model.Creditorder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_creditorder (userID, goodsName, goodsID, 
      addressID, address, Pricce, 
      createTime, logistics, message, 
      logisticsCode, isPay)
    values (#{userid,jdbcType=BIGINT}, #{goodsname,jdbcType=VARCHAR}, #{goodsid,jdbcType=BIGINT}, 
      #{addressid,jdbcType=BIGINT}, #{address,jdbcType=VARCHAR}, #{pricce,jdbcType=BIGINT}, 
      #{createtime,jdbcType=TIMESTAMP}, #{logistics,jdbcType=VARCHAR}, #{message,jdbcType=VARCHAR}, 
      #{logisticscode,jdbcType=BIGINT}, #{ispay,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.linjun.model.Creditorder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_creditorder
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        userID,
      </if>
      <if test="goodsname != null">
        goodsName,
      </if>
      <if test="goodsid != null">
        goodsID,
      </if>
      <if test="addressid != null">
        addressID,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="pricce != null">
        Pricce,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="logistics != null">
        logistics,
      </if>
      <if test="message != null">
        message,
      </if>
      <if test="logisticscode != null">
        logisticsCode,
      </if>
      <if test="ispay != null">
        isPay,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=BIGINT},
      </if>
      <if test="goodsname != null">
        #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsid != null">
        #{goodsid,jdbcType=BIGINT},
      </if>
      <if test="addressid != null">
        #{addressid,jdbcType=BIGINT},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="pricce != null">
        #{pricce,jdbcType=BIGINT},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="logistics != null">
        #{logistics,jdbcType=VARCHAR},
      </if>
      <if test="message != null">
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="logisticscode != null">
        #{logisticscode,jdbcType=BIGINT},
      </if>
      <if test="ispay != null">
        #{ispay,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.linjun.model.CreditorderCriteria" resultType="java.lang.Long">
    select count(*) from t_creditorder
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_creditorder
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userid != null">
        userID = #{record.userid,jdbcType=BIGINT},
      </if>
      <if test="record.goodsname != null">
        goodsName = #{record.goodsname,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsid != null">
        goodsID = #{record.goodsid,jdbcType=BIGINT},
      </if>
      <if test="record.addressid != null">
        addressID = #{record.addressid,jdbcType=BIGINT},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.pricce != null">
        Pricce = #{record.pricce,jdbcType=BIGINT},
      </if>
      <if test="record.createtime != null">
        createTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.logistics != null">
        logistics = #{record.logistics,jdbcType=VARCHAR},
      </if>
      <if test="record.message != null">
        message = #{record.message,jdbcType=VARCHAR},
      </if>
      <if test="record.logisticscode != null">
        logisticsCode = #{record.logisticscode,jdbcType=BIGINT},
      </if>
      <if test="record.ispay != null">
        isPay = #{record.ispay,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_creditorder
    set id = #{record.id,jdbcType=BIGINT},
      userID = #{record.userid,jdbcType=BIGINT},
      goodsName = #{record.goodsname,jdbcType=VARCHAR},
      goodsID = #{record.goodsid,jdbcType=BIGINT},
      addressID = #{record.addressid,jdbcType=BIGINT},
      address = #{record.address,jdbcType=VARCHAR},
      Pricce = #{record.pricce,jdbcType=BIGINT},
      createTime = #{record.createtime,jdbcType=TIMESTAMP},
      logistics = #{record.logistics,jdbcType=VARCHAR},
      message = #{record.message,jdbcType=VARCHAR},
      logisticsCode = #{record.logisticscode,jdbcType=BIGINT},
      isPay = #{record.ispay,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.linjun.model.Creditorder">
    update t_creditorder
    <set>
      <if test="userid != null">
        userID = #{userid,jdbcType=BIGINT},
      </if>
      <if test="goodsname != null">
        goodsName = #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsid != null">
        goodsID = #{goodsid,jdbcType=BIGINT},
      </if>
      <if test="addressid != null">
        addressID = #{addressid,jdbcType=BIGINT},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="pricce != null">
        Pricce = #{pricce,jdbcType=BIGINT},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="logistics != null">
        logistics = #{logistics,jdbcType=VARCHAR},
      </if>
      <if test="message != null">
        message = #{message,jdbcType=VARCHAR},
      </if>
      <if test="logisticscode != null">
        logisticsCode = #{logisticscode,jdbcType=BIGINT},
      </if>
      <if test="ispay != null">
        isPay = #{ispay,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.linjun.model.Creditorder">
    update t_creditorder
    set userID = #{userid,jdbcType=BIGINT},
      goodsName = #{goodsname,jdbcType=VARCHAR},
      goodsID = #{goodsid,jdbcType=BIGINT},
      addressID = #{addressid,jdbcType=BIGINT},
      address = #{address,jdbcType=VARCHAR},
      Pricce = #{pricce,jdbcType=BIGINT},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      logistics = #{logistics,jdbcType=VARCHAR},
      message = #{message,jdbcType=VARCHAR},
      logisticsCode = #{logisticscode,jdbcType=BIGINT},
      isPay = #{ispay,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>