<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linjun.dao.OrderMapper">
  <resultMap id="BaseResultMap" type="com.linjun.model.Order">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="userID" jdbcType="BIGINT" property="userid" />
    <result column="storeID" jdbcType="BIGINT" property="storeid" />
    <result column="orderCode" jdbcType="BIGINT" property="ordercode" />
    <result column="goodsName" jdbcType="VARCHAR" property="goodsname" />
    <result column="goodsID" jdbcType="BIGINT" property="goodsid" />
    <result column="addressID" jdbcType="BIGINT" property="addressid" />
    <result column="marketPricce" jdbcType="REAL" property="marketpricce" />
    <result column="memberPrice" jdbcType="REAL" property="memberprice" />
    <result column="goodSum" jdbcType="INTEGER" property="goodsum" />
    <result column="priceSum" jdbcType="REAL" property="pricesum" />
    <result column="sendTime" jdbcType="TIMESTAMP" property="sendtime" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="payTime" jdbcType="TIMESTAMP" property="paytime" />
    <result column="cancel" jdbcType="TIMESTAMP" property="cancel" />
    <result column="completeTime" jdbcType="TIMESTAMP" property="completetime" />
    <result column="logistics" jdbcType="VARCHAR" property="logistics" />
    <result column="message" jdbcType="VARCHAR" property="message" />
    <result column="logisticsCode" jdbcType="BIGINT" property="logisticscode" />
    <result column="isPay" jdbcType="TINYINT" property="ispay" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userID, storeID, orderCode, goodsName, goodsID, addressID, marketPricce, memberPrice, 
    goodSum, priceSum, sendTime, createTime, payTime, cancel, completeTime, logistics, 
    message, logisticsCode, isPay
  </sql>
  <select id="selectByExample" parameterType="com.linjun.model.OrderCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_order
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_order
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.linjun.model.OrderCriteria">
    delete from t_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.linjun.model.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_order (userID, storeID, orderCode, 
      goodsName, goodsID, addressID, 
      marketPricce, memberPrice, goodSum, 
      priceSum, sendTime, createTime, 
      payTime, cancel, completeTime, 
      logistics, message, logisticsCode, 
      isPay)
    values (#{userid,jdbcType=BIGINT}, #{storeid,jdbcType=BIGINT}, #{ordercode,jdbcType=BIGINT}, 
      #{goodsname,jdbcType=VARCHAR}, #{goodsid,jdbcType=BIGINT}, #{addressid,jdbcType=BIGINT}, 
      #{marketpricce,jdbcType=REAL}, #{memberprice,jdbcType=REAL}, #{goodsum,jdbcType=INTEGER}, 
      #{pricesum,jdbcType=REAL}, #{sendtime,jdbcType=TIMESTAMP}, #{createtime,jdbcType=TIMESTAMP}, 
      #{paytime,jdbcType=TIMESTAMP}, #{cancel,jdbcType=TIMESTAMP}, #{completetime,jdbcType=TIMESTAMP}, 
      #{logistics,jdbcType=VARCHAR}, #{message,jdbcType=VARCHAR}, #{logisticscode,jdbcType=BIGINT}, 
      #{ispay,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.linjun.model.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        userID,
      </if>
      <if test="storeid != null">
        storeID,
      </if>
      <if test="ordercode != null">
        orderCode,
      </if>
      <if test="goodsname != null">
        goodsName,
      </if>
      <if test="goodsid != null">
        goodsID,
      </if>
      <if test="addressid != null">
        addressID,
      </if>
      <if test="marketpricce != null">
        marketPricce,
      </if>
      <if test="memberprice != null">
        memberPrice,
      </if>
      <if test="goodsum != null">
        goodSum,
      </if>
      <if test="pricesum != null">
        priceSum,
      </if>
      <if test="sendtime != null">
        sendTime,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="paytime != null">
        payTime,
      </if>
      <if test="cancel != null">
        cancel,
      </if>
      <if test="completetime != null">
        completeTime,
      </if>
      <if test="logistics != null">
        logistics,
      </if>
      <if test="message != null">
        message,
      </if>
      <if test="logisticscode != null">
        logisticsCode,
      </if>
      <if test="ispay != null">
        isPay,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=BIGINT},
      </if>
      <if test="storeid != null">
        #{storeid,jdbcType=BIGINT},
      </if>
      <if test="ordercode != null">
        #{ordercode,jdbcType=BIGINT},
      </if>
      <if test="goodsname != null">
        #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsid != null">
        #{goodsid,jdbcType=BIGINT},
      </if>
      <if test="addressid != null">
        #{addressid,jdbcType=BIGINT},
      </if>
      <if test="marketpricce != null">
        #{marketpricce,jdbcType=REAL},
      </if>
      <if test="memberprice != null">
        #{memberprice,jdbcType=REAL},
      </if>
      <if test="goodsum != null">
        #{goodsum,jdbcType=INTEGER},
      </if>
      <if test="pricesum != null">
        #{pricesum,jdbcType=REAL},
      </if>
      <if test="sendtime != null">
        #{sendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="paytime != null">
        #{paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="cancel != null">
        #{cancel,jdbcType=TIMESTAMP},
      </if>
      <if test="completetime != null">
        #{completetime,jdbcType=TIMESTAMP},
      </if>
      <if test="logistics != null">
        #{logistics,jdbcType=VARCHAR},
      </if>
      <if test="message != null">
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="logisticscode != null">
        #{logisticscode,jdbcType=BIGINT},
      </if>
      <if test="ispay != null">
        #{ispay,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.linjun.model.OrderCriteria" resultType="java.lang.Long">
    select count(*) from t_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userid != null">
        userID = #{record.userid,jdbcType=BIGINT},
      </if>
      <if test="record.storeid != null">
        storeID = #{record.storeid,jdbcType=BIGINT},
      </if>
      <if test="record.ordercode != null">
        orderCode = #{record.ordercode,jdbcType=BIGINT},
      </if>
      <if test="record.goodsname != null">
        goodsName = #{record.goodsname,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsid != null">
        goodsID = #{record.goodsid,jdbcType=BIGINT},
      </if>
      <if test="record.addressid != null">
        addressID = #{record.addressid,jdbcType=BIGINT},
      </if>
      <if test="record.marketpricce != null">
        marketPricce = #{record.marketpricce,jdbcType=REAL},
      </if>
      <if test="record.memberprice != null">
        memberPrice = #{record.memberprice,jdbcType=REAL},
      </if>
      <if test="record.goodsum != null">
        goodSum = #{record.goodsum,jdbcType=INTEGER},
      </if>
      <if test="record.pricesum != null">
        priceSum = #{record.pricesum,jdbcType=REAL},
      </if>
      <if test="record.sendtime != null">
        sendTime = #{record.sendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createtime != null">
        createTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.paytime != null">
        payTime = #{record.paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cancel != null">
        cancel = #{record.cancel,jdbcType=TIMESTAMP},
      </if>
      <if test="record.completetime != null">
        completeTime = #{record.completetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.logistics != null">
        logistics = #{record.logistics,jdbcType=VARCHAR},
      </if>
      <if test="record.message != null">
        message = #{record.message,jdbcType=VARCHAR},
      </if>
      <if test="record.logisticscode != null">
        logisticsCode = #{record.logisticscode,jdbcType=BIGINT},
      </if>
      <if test="record.ispay != null">
        isPay = #{record.ispay,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_order
    set id = #{record.id,jdbcType=BIGINT},
      userID = #{record.userid,jdbcType=BIGINT},
      storeID = #{record.storeid,jdbcType=BIGINT},
      orderCode = #{record.ordercode,jdbcType=BIGINT},
      goodsName = #{record.goodsname,jdbcType=VARCHAR},
      goodsID = #{record.goodsid,jdbcType=BIGINT},
      addressID = #{record.addressid,jdbcType=BIGINT},
      marketPricce = #{record.marketpricce,jdbcType=REAL},
      memberPrice = #{record.memberprice,jdbcType=REAL},
      goodSum = #{record.goodsum,jdbcType=INTEGER},
      priceSum = #{record.pricesum,jdbcType=REAL},
      sendTime = #{record.sendtime,jdbcType=TIMESTAMP},
      createTime = #{record.createtime,jdbcType=TIMESTAMP},
      payTime = #{record.paytime,jdbcType=TIMESTAMP},
      cancel = #{record.cancel,jdbcType=TIMESTAMP},
      completeTime = #{record.completetime,jdbcType=TIMESTAMP},
      logistics = #{record.logistics,jdbcType=VARCHAR},
      message = #{record.message,jdbcType=VARCHAR},
      logisticsCode = #{record.logisticscode,jdbcType=BIGINT},
      isPay = #{record.ispay,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.linjun.model.Order">
    update t_order
    <set>
      <if test="userid != null">
        userID = #{userid,jdbcType=BIGINT},
      </if>
      <if test="storeid != null">
        storeID = #{storeid,jdbcType=BIGINT},
      </if>
      <if test="ordercode != null">
        orderCode = #{ordercode,jdbcType=BIGINT},
      </if>
      <if test="goodsname != null">
        goodsName = #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsid != null">
        goodsID = #{goodsid,jdbcType=BIGINT},
      </if>
      <if test="addressid != null">
        addressID = #{addressid,jdbcType=BIGINT},
      </if>
      <if test="marketpricce != null">
        marketPricce = #{marketpricce,jdbcType=REAL},
      </if>
      <if test="memberprice != null">
        memberPrice = #{memberprice,jdbcType=REAL},
      </if>
      <if test="goodsum != null">
        goodSum = #{goodsum,jdbcType=INTEGER},
      </if>
      <if test="pricesum != null">
        priceSum = #{pricesum,jdbcType=REAL},
      </if>
      <if test="sendtime != null">
        sendTime = #{sendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="paytime != null">
        payTime = #{paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="cancel != null">
        cancel = #{cancel,jdbcType=TIMESTAMP},
      </if>
      <if test="completetime != null">
        completeTime = #{completetime,jdbcType=TIMESTAMP},
      </if>
      <if test="logistics != null">
        logistics = #{logistics,jdbcType=VARCHAR},
      </if>
      <if test="message != null">
        message = #{message,jdbcType=VARCHAR},
      </if>
      <if test="logisticscode != null">
        logisticsCode = #{logisticscode,jdbcType=BIGINT},
      </if>
      <if test="ispay != null">
        isPay = #{ispay,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="dimStatus" resultMap="BaseResultMap">
    SELECT  * FROM t_order WHERE  id  = #{temp,jdbcType=BIGINT} and isPay = #{status,jdbcType=TINYINT}
  </select>
  <update id="updateByPrimaryKey" parameterType="com.linjun.model.Order">
    update t_order
    set userID = #{userid,jdbcType=BIGINT},
      storeID = #{storeid,jdbcType=BIGINT},
      orderCode = #{ordercode,jdbcType=BIGINT},
      goodsName = #{goodsname,jdbcType=VARCHAR},
      goodsID = #{goodsid,jdbcType=BIGINT},
      addressID = #{addressid,jdbcType=BIGINT},
      marketPricce = #{marketpricce,jdbcType=REAL},
      memberPrice = #{memberprice,jdbcType=REAL},
      goodSum = #{goodsum,jdbcType=INTEGER},
      priceSum = #{pricesum,jdbcType=REAL},
      sendTime = #{sendtime,jdbcType=TIMESTAMP},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      payTime = #{paytime,jdbcType=TIMESTAMP},
      cancel = #{cancel,jdbcType=TIMESTAMP},
      completeTime = #{completetime,jdbcType=TIMESTAMP},
      logistics = #{logistics,jdbcType=VARCHAR},
      message = #{message,jdbcType=VARCHAR},
      logisticsCode = #{logisticscode,jdbcType=BIGINT},
      isPay = #{ispay,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>